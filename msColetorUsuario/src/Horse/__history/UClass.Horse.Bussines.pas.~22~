unit UClass.Horse.Bussines;

interface

uses Horse;

type
   IBussinesHorse = interface
   ['{1425F1CA-0D27-42A6-B85E-ED222835AEFC}']
      function GetPort: Integer;
      procedure SetPort(const Value: Integer);

      procedure Registering;
      procedure Start;
      procedure Stop;

      property Port : Integer read GetPort write SetPort;
   end;

   TBussinesHorse = class(TInterfacedObject, IBussinesHorse)
   strict private class var
      FInstance : IBussinesHorse;
   private
      FPort : Integer;
      function GetPort: Integer;
      procedure SetPort(const Value: Integer);
   public
      class function GetInstance : IBussinesHorse;

      procedure Registering;
      procedure Start;
      procedure Stop;

      property Port : Integer read GetPort write SetPort default 8080;
   end;

implementation

{ TBussinesHorse }

class function TBussinesHorse.GetInstance: IBussinesHorse;
begin
   if not Assigned(FInstance) then
      FInstance := TBussinesHorse.Create;

   Result := FInstance;
end;

function TBussinesHorse.GetPort: Integer;
begin

end;

procedure TBussinesHorse.Registering;
begin

end;

procedure TBussinesHorse.SetPort(const Value: Integer);
begin

end;

procedure TBussinesHorse.Start;
begin
   THorse.Listen(FPort);
end;

procedure TBussinesHorse.Stop;
begin
   THorse.StopListen;
end;

end.
